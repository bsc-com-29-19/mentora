[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "RepositoryEnv",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "find_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "JournalEntryDB",
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "isExtraImport": true,
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "JournalEntryDB",
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "isExtraImport": true,
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "JournalEntry",
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "isExtraImport": true,
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "Activity",
        "importPath": "app.activities.models",
        "description": "app.activities.models",
        "isExtraImport": true,
        "detail": "app.activities.models",
        "documentation": {}
    },
    {
        "label": "ActivityStatus",
        "importPath": "app.activities.models",
        "description": "app.activities.models",
        "isExtraImport": true,
        "detail": "app.activities.models",
        "documentation": {}
    },
    {
        "label": "Activity",
        "importPath": "app.activities.models",
        "description": "app.activities.models",
        "isExtraImport": true,
        "detail": "app.activities.models",
        "documentation": {}
    },
    {
        "label": "ActivityStatus",
        "importPath": "app.activities.models",
        "description": "app.activities.models",
        "isExtraImport": true,
        "detail": "app.activities.models",
        "documentation": {}
    },
    {
        "label": "Activity",
        "importPath": "app.activities.models",
        "description": "app.activities.models",
        "isExtraImport": true,
        "detail": "app.activities.models",
        "documentation": {}
    },
    {
        "label": "ActivityStatus",
        "importPath": "app.activities.models",
        "description": "app.activities.models",
        "isExtraImport": true,
        "detail": "app.activities.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "app.activities.db_connection",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "app.activities.db_connection",
        "description": "app.activities.db_connection",
        "detail": "app.activities.db_connection",
        "documentation": {}
    },
    {
        "label": "generate_activities_custom_for_all_users",
        "importPath": "app.activities.db_connection",
        "description": "app.activities.db_connection",
        "isExtraImport": true,
        "detail": "app.activities.db_connection",
        "documentation": {}
    },
    {
        "label": "get_db_connection_check",
        "importPath": "app.activities.db_connection",
        "description": "app.activities.db_connection",
        "isExtraImport": true,
        "detail": "app.activities.db_connection",
        "documentation": {}
    },
    {
        "label": "start_scheduler",
        "importPath": "app.activities.db_connection",
        "description": "app.activities.db_connection",
        "isExtraImport": true,
        "detail": "app.activities.db_connection",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocketDisconnect",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "SQLDatabase",
        "importPath": "langchain_community.utilities.sql_database",
        "description": "langchain_community.utilities.sql_database",
        "isExtraImport": true,
        "detail": "langchain_community.utilities.sql_database",
        "documentation": {}
    },
    {
        "label": "SQLDatabaseChain",
        "importPath": "langchain_experimental.sql",
        "description": "langchain_experimental.sql",
        "isExtraImport": true,
        "detail": "langchain_experimental.sql",
        "documentation": {}
    },
    {
        "label": "BackgroundScheduler",
        "importPath": "apscheduler.schedulers.background",
        "description": "apscheduler.schedulers.background",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.background",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "list_all_users_service",
        "importPath": "app.auth.services",
        "description": "app.auth.services",
        "isExtraImport": true,
        "detail": "app.auth.services",
        "documentation": {}
    },
    {
        "label": "list_all_journals_service",
        "importPath": "app.journal.services",
        "description": "app.journal.services",
        "isExtraImport": true,
        "detail": "app.journal.services",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "ChatPromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "MessagesPlaceholder",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "ChatPromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "MessagesPlaceholder",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "create_activity_service",
        "importPath": "app.activities.services",
        "description": "app.activities.services",
        "isExtraImport": true,
        "detail": "app.activities.services",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "BaseChatMessageHistory",
        "importPath": "langchain_core.chat_history",
        "description": "langchain_core.chat_history",
        "isExtraImport": true,
        "detail": "langchain_core.chat_history",
        "documentation": {}
    },
    {
        "label": "InMemoryChatMessageHistory",
        "importPath": "langchain_core.chat_history",
        "description": "langchain_core.chat_history",
        "isExtraImport": true,
        "detail": "langchain_core.chat_history",
        "documentation": {}
    },
    {
        "label": "RunnableWithMessageHistory",
        "importPath": "langchain_core.runnables.history",
        "description": "langchain_core.runnables.history",
        "isExtraImport": true,
        "detail": "langchain_core.runnables.history",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database ",
        "description": "database ",
        "isExtraImport": true,
        "detail": "database ",
        "documentation": {}
    },
    {
        "label": "get_stats_for_user",
        "importPath": "app.stats.services",
        "description": "app.stats.services",
        "isExtraImport": true,
        "detail": "app.stats.services",
        "documentation": {}
    },
    {
        "label": "StatsResponse",
        "importPath": "app.stats.schemas",
        "description": "app.stats.schemas",
        "isExtraImport": true,
        "detail": "app.stats.schemas",
        "documentation": {}
    },
    {
        "label": "WeeklyStatsResponse",
        "importPath": "app.stats.schemas",
        "description": "app.stats.schemas",
        "isExtraImport": true,
        "detail": "app.stats.schemas",
        "documentation": {}
    },
    {
        "label": "StatsResponse",
        "importPath": "app.stats.schemas",
        "description": "app.stats.schemas",
        "isExtraImport": true,
        "detail": "app.stats.schemas",
        "documentation": {}
    },
    {
        "label": "DailyStats",
        "importPath": "app.stats.schemas",
        "description": "app.stats.schemas",
        "isExtraImport": true,
        "detail": "app.stats.schemas",
        "documentation": {}
    },
    {
        "label": "WeeklyStatsResponse",
        "importPath": "app.stats.schemas",
        "description": "app.stats.schemas",
        "isExtraImport": true,
        "detail": "app.stats.schemas",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "importPath": "app.auth.bearer",
        "description": "app.auth.bearer",
        "isExtraImport": true,
        "detail": "app.auth.bearer",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "user_router",
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "isExtraImport": true,
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "journal_router",
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "isExtraImport": true,
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "chat_router",
        "importPath": "app.chatbot.routes",
        "description": "app.chatbot.routes",
        "isExtraImport": true,
        "detail": "app.chatbot.routes",
        "documentation": {}
    },
    {
        "label": "activity_router",
        "importPath": "app.activities.routes",
        "description": "app.activities.routes",
        "isExtraImport": true,
        "detail": "app.activities.routes",
        "documentation": {}
    },
    {
        "label": "stats_router",
        "importPath": "app.stats.routes",
        "description": "app.stats.routes",
        "isExtraImport": true,
        "detail": "app.stats.routes",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.faa54a879958_created_db_models",
        "description": "alembic.versions.faa54a879958_created_db_models",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('id', sa.UUID(), nullable=False),\n    sa.Column('full_name', sa.String(), nullable=True),\n    sa.Column('username', sa.String(), nullable=True),\n    sa.Column('email', sa.String(), nullable=True),\n    sa.Column('hashed_password', sa.String(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "alembic.versions.faa54a879958_created_db_models",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.faa54a879958_created_db_models",
        "description": "alembic.versions.faa54a879958_created_db_models",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('journal_entries')\n    op.drop_index(op.f('ix_users_username'), table_name='users')\n    op.drop_index(op.f('ix_users_email'), table_name='users')\n    op.drop_table('users')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.faa54a879958_created_db_models",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    config_section = config.get_section(config.config_ini_section)\n    config_section['sqlalchemy.url'] = db_url\n    connectable = engine_from_config(\n        config_section,\n        prefix=\"sqlalchemy.\",",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# envConfig = Config(RepositoryEnv(\".env\"))\n# app_env = os.getenv('APP_ENV','dev')\ndb_username = os.getenv('DB_USERNAME')\ndb_password = os.getenv('DB_PASSWORD')\ndb_host = os.getenv('DB_HOST')\ndb_name = os.getenv('DB_NAME')\n# if(app_env == 'prod'):\n#     env_path = find_dotenv('env.prod')\n#     envConfig =Config(RepositoryEnv(env_path))",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "db_username",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "db_username = os.getenv('DB_USERNAME')\ndb_password = os.getenv('DB_PASSWORD')\ndb_host = os.getenv('DB_HOST')\ndb_name = os.getenv('DB_NAME')\n# if(app_env == 'prod'):\n#     env_path = find_dotenv('env.prod')\n#     envConfig =Config(RepositoryEnv(env_path))\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "db_password",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "db_password = os.getenv('DB_PASSWORD')\ndb_host = os.getenv('DB_HOST')\ndb_name = os.getenv('DB_NAME')\n# if(app_env == 'prod'):\n#     env_path = find_dotenv('env.prod')\n#     envConfig =Config(RepositoryEnv(env_path))\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "db_host",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "db_host = os.getenv('DB_HOST')\ndb_name = os.getenv('DB_NAME')\n# if(app_env == 'prod'):\n#     env_path = find_dotenv('env.prod')\n#     envConfig =Config(RepositoryEnv(env_path))\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\ndb_url = f\"postgresql://{db_username}:{db_password}@{db_host}/{db_name}\"",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "db_name",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "db_name = os.getenv('DB_NAME')\n# if(app_env == 'prod'):\n#     env_path = find_dotenv('env.prod')\n#     envConfig =Config(RepositoryEnv(env_path))\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\ndb_url = f\"postgresql://{db_username}:{db_password}@{db_host}/{db_name}\"\n# db_url =f\"postgresql://{envConfig('DB_USERNAME')}:{envConfig('DB_PASSWORD')}@{envConfig('DB_HOST')}/{envConfig('DB_NAME')}\"",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "db_url = f\"postgresql://{db_username}:{db_password}@{db_host}/{db_name}\"\n# db_url =f\"postgresql://{envConfig('DB_USERNAME')}:{envConfig('DB_PASSWORD')}@{envConfig('DB_HOST')}/{envConfig('DB_NAME')}\"\n# section = config.config_ini_section\n# config.set_section_option(section,\"DB_NAME\",envConfig(\"DB_NAME\"))\n# config.set_section_option(section,\"DB_USERNAME\",envConfig(\"DB_USERNAME\"))\n# config.set_section_option(section,\"DB_PASSWORD\",envConfig(\"DB_PASSWORD\"))\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\nconfig.set_main_option('sqlalchemy.url',db_url)\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "generate_activities_custom_for_all_users",
        "kind": 2,
        "importPath": "app.activities.db_connection",
        "description": "app.activities.db_connection",
        "peekOfCode": "def generate_activities_custom_for_all_users():\n    db1 = next(get_db())  \n    # List of mental health-improving activities with shortened titles\n    suggested_activities = [\n        {\"title\": \"Go for a walk\", \"description\": \"A 30-minute walk in nature can improve mood and reduce anxiety.\"},\n        {\"title\": \"Meditate\", \"description\": \"Spend 15 minutes focusing on your breath to relax your mind.\"},\n        {\"title\": \"Read a book\", \"description\": \"Reading can be a great escape and help reduce stress.\"},\n        {\"title\": \"Gym exercise\", \"description\": \"Physical activity boosts serotonin and can help alleviate depression.\"},\n        {\"title\": \"Connect with a friend\", \"description\": \"Socializing and spending time with friends improves emotional well-being.\"},\n        {\"title\": \"Journal\", \"description\": \"Writing about your feelings can help process emotions and clear your mind.\"},",
        "detail": "app.activities.db_connection",
        "documentation": {}
    },
    {
        "label": "start_scheduler",
        "kind": 2,
        "importPath": "app.activities.db_connection",
        "description": "app.activities.db_connection",
        "peekOfCode": "def start_scheduler():\n    scheduler = BackgroundScheduler(timezone=\"UTC\")\n    scheduler.add_job(generate_activities_custom_for_all_users, 'cron', hour=7, minute=45)\n    scheduler.start()\n    logging.info(\"Scheduler started\")\n# def shutdown_scheduler():\n#     scheduler.shutdown()\ndef get_db_connection_check():\n    # query = \"How many users have signed up show  their username and email and list of activities for every user\"\n    query= \"show all activities\"",
        "detail": "app.activities.db_connection",
        "documentation": {}
    },
    {
        "label": "get_db_connection_check",
        "kind": 2,
        "importPath": "app.activities.db_connection",
        "description": "app.activities.db_connection",
        "peekOfCode": "def get_db_connection_check():\n    # query = \"How many users have signed up show  their username and email and list of activities for every user\"\n    query= \"show all activities\"\n    # result = db_chain.invoke(query)\n    result = \"\"\n    return {\"status\": \"success\", \"data\": result}",
        "detail": "app.activities.db_connection",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.activities.db_connection",
        "description": "app.activities.db_connection",
        "peekOfCode": "DATABASE_URL = os.getenv('DATABASE_URL')\n##### db = sql_database(DATABASE_URL)\ndb = SQLDatabase.from_uri(DATABASE_URL)\n###### db = SQLDatabase.from_uri(\"postgresql://admin:password@postgres:5432/mentoradb\")\nprint(f\"DB: {db}\")  # Print the database object (for debugging pub)\n#### Initialize the model\nmodel = ChatOpenAI(model=\"gpt-3.5-turbo\")\nlogging.basicConfig(level=logging.INFO)\n# db_chain = SQLDatabaseChain.from_llm(model,db,verbose=True)  \ndef generate_activities_custom_for_all_users():",
        "detail": "app.activities.db_connection",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.activities.db_connection",
        "description": "app.activities.db_connection",
        "peekOfCode": "db = SQLDatabase.from_uri(DATABASE_URL)\n###### db = SQLDatabase.from_uri(\"postgresql://admin:password@postgres:5432/mentoradb\")\nprint(f\"DB: {db}\")  # Print the database object (for debugging pub)\n#### Initialize the model\nmodel = ChatOpenAI(model=\"gpt-3.5-turbo\")\nlogging.basicConfig(level=logging.INFO)\n# db_chain = SQLDatabaseChain.from_llm(model,db,verbose=True)  \ndef generate_activities_custom_for_all_users():\n    db1 = next(get_db())  \n    # List of mental health-improving activities with shortened titles",
        "detail": "app.activities.db_connection",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app.activities.db_connection",
        "description": "app.activities.db_connection",
        "peekOfCode": "model = ChatOpenAI(model=\"gpt-3.5-turbo\")\nlogging.basicConfig(level=logging.INFO)\n# db_chain = SQLDatabaseChain.from_llm(model,db,verbose=True)  \ndef generate_activities_custom_for_all_users():\n    db1 = next(get_db())  \n    # List of mental health-improving activities with shortened titles\n    suggested_activities = [\n        {\"title\": \"Go for a walk\", \"description\": \"A 30-minute walk in nature can improve mood and reduce anxiety.\"},\n        {\"title\": \"Meditate\", \"description\": \"Spend 15 minutes focusing on your breath to relax your mind.\"},\n        {\"title\": \"Read a book\", \"description\": \"Reading can be a great escape and help reduce stress.\"},",
        "detail": "app.activities.db_connection",
        "documentation": {}
    },
    {
        "label": "ActivityStatus",
        "kind": 6,
        "importPath": "app.activities.models",
        "description": "app.activities.models",
        "peekOfCode": "class ActivityStatus(str, PyEnum):\n    NOT_DONE = \"not_done\"\n    DONE = \"done\"\nclass Activity(Base):\n    __tablename__ = \"activities\"\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    title = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    status = Column(Enum(ActivityStatus), default=ActivityStatus.NOT_DONE, nullable=False)  # Set default to NOT_DONE\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"), nullable=False)",
        "detail": "app.activities.models",
        "documentation": {}
    },
    {
        "label": "Activity",
        "kind": 6,
        "importPath": "app.activities.models",
        "description": "app.activities.models",
        "peekOfCode": "class Activity(Base):\n    __tablename__ = \"activities\"\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    title = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    status = Column(Enum(ActivityStatus), default=ActivityStatus.NOT_DONE, nullable=False)  # Set default to NOT_DONE\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"), nullable=False)\n    created_at = Column(DateTime, default=datetime.now(timezone.utc) )\n    updated_at = Column(DateTime, default=datetime.now(timezone.utc) , onupdate=datetime.now(timezone.utc) )\n    creator = relationship(\"User\", backref=\"activities\")",
        "detail": "app.activities.models",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "app.activities.prompts",
        "description": "app.activities.prompts",
        "peekOfCode": "prompt = ChatPromptTemplate.from_messages(\n    [\n        (\n             \"system\",\n            \"\"\"You are a database assistant helping to retrieve information from a PostgreSQL database. Your role is to generate SQL queries that retrieve data accurately based on the user’s request.\n            ### Task:\n            - Retrieve a list of all users, where each user includes a list of activities from the activities table.\n            - The `users` table has columns `id` and `name`.\n            - The `activities` table has columns `user_id` (foreign key to users.id) and `activity_name`.\n            ### Query Requirements:",
        "detail": "app.activities.prompts",
        "documentation": {}
    },
    {
        "label": "prompt1",
        "kind": 5,
        "importPath": "app.activities.prompts",
        "description": "app.activities.prompts",
        "peekOfCode": "prompt1 = ChatPromptTemplate.from_messages(\n    [\n        (\n            \"system\",\n            \"\"\"You are a database assistant helping to retrieve and organize information from a PostgreSQL database. Your role is to generate SQL queries and Python functions that accurately retrieve and process data based on the user’s request.\n            ### Task:\n            - For each user, generate six activities at night (`22:35`) CAT based on all journal entries.\n            - Use the `journals` table to analyze each user’s entries and determine suitable activities.\n            - The activities should follow the format: \n                ```python",
        "detail": "app.activities.prompts",
        "documentation": {}
    },
    {
        "label": "create_activity",
        "kind": 2,
        "importPath": "app.activities.routes",
        "description": "app.activities.routes",
        "peekOfCode": "def create_activity(activity_data: ActivityCreate, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    activity = create_activity_service(activity_data, db, user)\n    return activity\n# List all activities\n@activity_router.get(\"/\", response_model=list[ActivityResponse])\ndef list_activities(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    activities = list_activities_service(db, user)\n    return activities\n@activity_router.get(\"/today\", response_model=list[ActivityResponse])\ndef list_today_activities(db: Session = Depends(get_db), user: User = Depends(get_current_user)):",
        "detail": "app.activities.routes",
        "documentation": {}
    },
    {
        "label": "list_activities",
        "kind": 2,
        "importPath": "app.activities.routes",
        "description": "app.activities.routes",
        "peekOfCode": "def list_activities(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    activities = list_activities_service(db, user)\n    return activities\n@activity_router.get(\"/today\", response_model=list[ActivityResponse])\ndef list_today_activities(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    activities = list_activities_for_today_service(db, user)\n    return activities\n# Get a single activity by ID\n@activity_router.get(\"/{activity_id}\", response_model=ActivityResponse)\ndef get_activity(activity_id: str, db: Session = Depends(get_db), user: User = Depends(get_current_user)):",
        "detail": "app.activities.routes",
        "documentation": {}
    },
    {
        "label": "list_today_activities",
        "kind": 2,
        "importPath": "app.activities.routes",
        "description": "app.activities.routes",
        "peekOfCode": "def list_today_activities(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    activities = list_activities_for_today_service(db, user)\n    return activities\n# Get a single activity by ID\n@activity_router.get(\"/{activity_id}\", response_model=ActivityResponse)\ndef get_activity(activity_id: str, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    activity = get_activity_service(activity_id, db, user)\n    return activity\n# Update activity status\n@activity_router.patch(\"/{activity_id}/status\", response_model=ActivityResponse)",
        "detail": "app.activities.routes",
        "documentation": {}
    },
    {
        "label": "get_activity",
        "kind": 2,
        "importPath": "app.activities.routes",
        "description": "app.activities.routes",
        "peekOfCode": "def get_activity(activity_id: str, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    activity = get_activity_service(activity_id, db, user)\n    return activity\n# Update activity status\n@activity_router.patch(\"/{activity_id}/status\", response_model=ActivityResponse)\ndef update_activity_status(\n    activity_id: str,\n    status_update: UpdateStatusRequest,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_user)",
        "detail": "app.activities.routes",
        "documentation": {}
    },
    {
        "label": "update_activity_status",
        "kind": 2,
        "importPath": "app.activities.routes",
        "description": "app.activities.routes",
        "peekOfCode": "def update_activity_status(\n    activity_id: str,\n    status_update: UpdateStatusRequest,\n    db: Session = Depends(get_db),\n    user: User = Depends(get_current_user)\n):\n    activity = update_activity_status_service(activity_id, status_update.status, db, user)\n    return activity\n# Update an existing activity\n@activity_router.put(\"/{activity_id}\", response_model=ActivityResponse)",
        "detail": "app.activities.routes",
        "documentation": {}
    },
    {
        "label": "update_activity",
        "kind": 2,
        "importPath": "app.activities.routes",
        "description": "app.activities.routes",
        "peekOfCode": "def update_activity(activity_id: str, activity_data: ActivityUpdate, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    activity = update_activity_service(activity_id, activity_data, db, user)\n    return activity\n# Delete an activity\n@activity_router.delete(\"/{activity_id}\")\ndef delete_activity(activity_id: str, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    activity = delete_activity_service(activity_id, db, user)\n    return {\"message\": f\"Activity : {activity.title} deleted successfully\"}\n@activity_router.delete(\"/all\")\ndef delete_all_activities(db: Session = Depends(get_db), user: User = Depends(get_current_user)):",
        "detail": "app.activities.routes",
        "documentation": {}
    },
    {
        "label": "delete_activity",
        "kind": 2,
        "importPath": "app.activities.routes",
        "description": "app.activities.routes",
        "peekOfCode": "def delete_activity(activity_id: str, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    activity = delete_activity_service(activity_id, db, user)\n    return {\"message\": f\"Activity : {activity.title} deleted successfully\"}\n@activity_router.delete(\"/all\")\ndef delete_all_activities(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    result = delete_all_activities_service(db, user)\n    return result",
        "detail": "app.activities.routes",
        "documentation": {}
    },
    {
        "label": "delete_all_activities",
        "kind": 2,
        "importPath": "app.activities.routes",
        "description": "app.activities.routes",
        "peekOfCode": "def delete_all_activities(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    result = delete_all_activities_service(db, user)\n    return result",
        "detail": "app.activities.routes",
        "documentation": {}
    },
    {
        "label": "activity_router",
        "kind": 5,
        "importPath": "app.activities.routes",
        "description": "app.activities.routes",
        "peekOfCode": "activity_router = APIRouter()\n# Todo : Seperate code to services and routes \n# Create a new activity\n@activity_router.post(\"/\", response_model=ActivityResponse)\ndef create_activity(activity_data: ActivityCreate, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    activity = create_activity_service(activity_data, db, user)\n    return activity\n# List all activities\n@activity_router.get(\"/\", response_model=list[ActivityResponse])\ndef list_activities(db: Session = Depends(get_db), user: User = Depends(get_current_user)):",
        "detail": "app.activities.routes",
        "documentation": {}
    },
    {
        "label": "ActivityStatus",
        "kind": 6,
        "importPath": "app.activities.schemas",
        "description": "app.activities.schemas",
        "peekOfCode": "class ActivityStatus(str, Enum):\n    NOT_DONE = \"not_done\"\n    DONE = \"done\"\nclass ActivityBase(BaseModel):\n    title: str\n    description: Optional[str] = None\n    status: ActivityStatus = ActivityStatus.NOT_DONE\nclass ActivityCreate(ActivityBase):\n    pass\nclass ActivityUpdate(ActivityBase):",
        "detail": "app.activities.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityBase",
        "kind": 6,
        "importPath": "app.activities.schemas",
        "description": "app.activities.schemas",
        "peekOfCode": "class ActivityBase(BaseModel):\n    title: str\n    description: Optional[str] = None\n    status: ActivityStatus = ActivityStatus.NOT_DONE\nclass ActivityCreate(ActivityBase):\n    pass\nclass ActivityUpdate(ActivityBase):\n    pass\nclass ActivityResponse(ActivityBase):\n    id: UUID",
        "detail": "app.activities.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityCreate",
        "kind": 6,
        "importPath": "app.activities.schemas",
        "description": "app.activities.schemas",
        "peekOfCode": "class ActivityCreate(ActivityBase):\n    pass\nclass ActivityUpdate(ActivityBase):\n    pass\nclass ActivityResponse(ActivityBase):\n    id: UUID\n    user_id: UUID\n    created_at: datetime\n    updated_at: datetime\n    class Config:",
        "detail": "app.activities.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityUpdate",
        "kind": 6,
        "importPath": "app.activities.schemas",
        "description": "app.activities.schemas",
        "peekOfCode": "class ActivityUpdate(ActivityBase):\n    pass\nclass ActivityResponse(ActivityBase):\n    id: UUID\n    user_id: UUID\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        orm_mode = True\nclass UpdateStatusRequest(BaseModel):",
        "detail": "app.activities.schemas",
        "documentation": {}
    },
    {
        "label": "ActivityResponse",
        "kind": 6,
        "importPath": "app.activities.schemas",
        "description": "app.activities.schemas",
        "peekOfCode": "class ActivityResponse(ActivityBase):\n    id: UUID\n    user_id: UUID\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        orm_mode = True\nclass UpdateStatusRequest(BaseModel):\n    status: str",
        "detail": "app.activities.schemas",
        "documentation": {}
    },
    {
        "label": "UpdateStatusRequest",
        "kind": 6,
        "importPath": "app.activities.schemas",
        "description": "app.activities.schemas",
        "peekOfCode": "class UpdateStatusRequest(BaseModel):\n    status: str",
        "detail": "app.activities.schemas",
        "documentation": {}
    },
    {
        "label": "create_activity_service",
        "kind": 2,
        "importPath": "app.activities.services",
        "description": "app.activities.services",
        "peekOfCode": "def create_activity_service(activity_data, db, user) -> Activity:\n    activity = Activity(title=activity_data.title, description=activity_data.description, status=activity_data.status.value, user_id=user.id)\n    db.add(activity)\n    db.commit()\n    db.refresh(activity)\n    return activity\ndef list_activities_service(db, user) -> list[Activity]:\n    activities = db.query(Activity).filter(Activity.user_id == user.id).all()\n    return activities\ndef list_all_activities_service(db) -> list[Activity]:",
        "detail": "app.activities.services",
        "documentation": {}
    },
    {
        "label": "list_activities_service",
        "kind": 2,
        "importPath": "app.activities.services",
        "description": "app.activities.services",
        "peekOfCode": "def list_activities_service(db, user) -> list[Activity]:\n    activities = db.query(Activity).filter(Activity.user_id == user.id).all()\n    return activities\ndef list_all_activities_service(db) -> list[Activity]:\n    activities = db.query(Activity).all()\n    return activities\ndef list_activities_for_today_service(db, user) -> list[Activity]:\n    today_start = datetime.now().date()\n    today_end = today_start + timedelta(days=1)\n    activities = db.query(Activity).filter(",
        "detail": "app.activities.services",
        "documentation": {}
    },
    {
        "label": "list_all_activities_service",
        "kind": 2,
        "importPath": "app.activities.services",
        "description": "app.activities.services",
        "peekOfCode": "def list_all_activities_service(db) -> list[Activity]:\n    activities = db.query(Activity).all()\n    return activities\ndef list_activities_for_today_service(db, user) -> list[Activity]:\n    today_start = datetime.now().date()\n    today_end = today_start + timedelta(days=1)\n    activities = db.query(Activity).filter(\n        Activity.user_id == user.id,\n        Activity.updated_at >= today_start,\n        Activity.updated_at < today_end",
        "detail": "app.activities.services",
        "documentation": {}
    },
    {
        "label": "list_activities_for_today_service",
        "kind": 2,
        "importPath": "app.activities.services",
        "description": "app.activities.services",
        "peekOfCode": "def list_activities_for_today_service(db, user) -> list[Activity]:\n    today_start = datetime.now().date()\n    today_end = today_start + timedelta(days=1)\n    activities = db.query(Activity).filter(\n        Activity.user_id == user.id,\n        Activity.updated_at >= today_start,\n        Activity.updated_at < today_end\n    ).all()\n    return activities\ndef get_activity_service(activity_id: str, db, user) -> Activity:",
        "detail": "app.activities.services",
        "documentation": {}
    },
    {
        "label": "get_activity_service",
        "kind": 2,
        "importPath": "app.activities.services",
        "description": "app.activities.services",
        "peekOfCode": "def get_activity_service(activity_id: str, db, user) -> Activity:\n    activity = db.query(Activity).filter(Activity.id == activity_id, Activity.user_id == user.id).first()\n    if not activity:\n        raise HTTPException(status_code=404, detail=\"Activity not found\")\n    return activity\ndef update_activity_status_service(activity_id: str, status: str, db, user) -> Activity:\n    activity = db.query(Activity).filter(Activity.id == activity_id, Activity.user_id == user.id).first()\n    if not activity:\n        raise HTTPException(status_code=404, detail=\"Activity not found\")\n    activity.status = status",
        "detail": "app.activities.services",
        "documentation": {}
    },
    {
        "label": "update_activity_status_service",
        "kind": 2,
        "importPath": "app.activities.services",
        "description": "app.activities.services",
        "peekOfCode": "def update_activity_status_service(activity_id: str, status: str, db, user) -> Activity:\n    activity = db.query(Activity).filter(Activity.id == activity_id, Activity.user_id == user.id).first()\n    if not activity:\n        raise HTTPException(status_code=404, detail=\"Activity not found\")\n    activity.status = status\n    db.commit()\n    db.refresh(activity)\n    return activity\ndef update_activity_service(activity_id: str, activity_data, db, user) -> Activity:\n    activity = db.query(Activity).filter(Activity.id == activity_id, Activity.user_id == user.id).first()",
        "detail": "app.activities.services",
        "documentation": {}
    },
    {
        "label": "update_activity_service",
        "kind": 2,
        "importPath": "app.activities.services",
        "description": "app.activities.services",
        "peekOfCode": "def update_activity_service(activity_id: str, activity_data, db, user) -> Activity:\n    activity = db.query(Activity).filter(Activity.id == activity_id, Activity.user_id == user.id).first()\n    if not activity:\n        raise HTTPException(status_code=404, detail=\"Activity not found\")\n    activity.title = activity_data.title\n    activity.description = activity_data.description\n    activity.status = activity_data.status.value\n    db.commit()\n    db.refresh(activity)\n    return activity",
        "detail": "app.activities.services",
        "documentation": {}
    },
    {
        "label": "delete_activity_service",
        "kind": 2,
        "importPath": "app.activities.services",
        "description": "app.activities.services",
        "peekOfCode": "def delete_activity_service(activity_id: str, db, user) -> Activity:\n    activity = db.query(Activity).filter(Activity.id == activity_id, Activity.user_id == user.id).first()\n    if not activity:\n        raise HTTPException(status_code=404, detail=\"Activity not found\")\n    db.delete(activity)\n    db.commit()\n    return activity\ndef delete_all_activities_service(db, user):\n    activities = db.query(Activity).filter(Activity.user_id == user.id).all()\n    if not activities:",
        "detail": "app.activities.services",
        "documentation": {}
    },
    {
        "label": "delete_all_activities_service",
        "kind": 2,
        "importPath": "app.activities.services",
        "description": "app.activities.services",
        "peekOfCode": "def delete_all_activities_service(db, user):\n    activities = db.query(Activity).filter(Activity.user_id == user.id).all()\n    if not activities:\n        raise HTTPException(status_code=404, detail=\"No activities found\")\n    for activity in activities:\n        db.delete(activity)\n    db.commit()\n    return {\"message\": f\"All activities for user {user.id} have been deleted successfully.\"}",
        "detail": "app.activities.services",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "kind": 6,
        "importPath": "app.auth.bearer",
        "description": "app.auth.bearer",
        "peekOfCode": "class JWTBearer(HTTPBearer):\n    def __init__(self, auto_error: bool = True):\n        super(JWTBearer, self).__init__(auto_error=auto_error)\n    async def __call__(self, request: Request):\n        credentials: HTTPAuthorizationCredentials = await super(JWTBearer, self).__call__(request)\n        if credentials:\n            if not credentials.scheme == \"Bearer\":\n                raise HTTPException(status_code=403, detail=\"Invalid authentication scheme.\")\n            if not self.verify_jwt(credentials.credentials):\n                raise HTTPException(status_code=403, detail=\"Invalid token or expired token.\")",
        "detail": "app.auth.bearer",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    full_name =Column(String,nullable=True)\n    username = Column(String, unique=True, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime, default=datetime.now(timezone.utc))\n    updated_at = Column(",
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "TokenBlacklist",
        "kind": 6,
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "peekOfCode": "class TokenBlacklist(Base):\n    __tablename__ = \"token_blacklist\"\n    token = Column(String, primary_key=True, unique=True, index=True)\n    blacklisted_at = Column(DateTime, default=datetime.now(timezone.utc))\n    expires_at = Column(DateTime, nullable=False)",
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def signup(user_data: UserCreate, db: Session = Depends(get_db)):\n    # Check if username or email already exists\n    if db.query(User).filter(User.username == user_data.username).first() or db.query(User).filter(User.email == user_data.email).first():\n        raise HTTPException(status_code=400, detail=\"Username or email already exists\")\n    #create a new user\n    user = User(full_name=user_data.full_name,username=user_data.username, email=user_data.email)\n    user.hash_password(user_data.password)\n    db.add(user)\n    db.commit()\n    db.refresh(user)",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def login(user_data: UserLogin, db: Session = Depends(get_db)):\n    user = db.query(User).filter((User.username == user_data.usernameoremail) | (User.email == user_data.usernameoremail)).first()\n    if user is None or not user.verify_password(user_data.password):\n        raise HTTPException(status_code=401, detail=\"Unknown Username/Email or Password\")\n    token = user.generate_token()\n    return LoginResponse(access_token=token, token_type=\"Bearer\", user_id=str(user.id),username=user.username, full_name=user.full_name, email=user.email)\n# Get user profile\n# todo : separate code to services and routes\n@user_router.get(\"/profile\", response_model=UserResponse)\ndef get_profile(user: User = Depends(get_current_user), db: Session = Depends(get_db)):",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "get_profile",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def get_profile(user: User = Depends(get_current_user), db: Session = Depends(get_db)):\n    return UserResponse(\n        id=str(user.id), \n        full_name=user.full_name,\n        username=user.username,\n        email=user.email,\n        is_active=user.is_active,\n        created_at=user.created_at,\n        updated_at=user.updated_at\n        )",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def logout(user: User = Depends(get_current_user), db: Session = Depends(get_db)):\n    # Extract token and expiration time\n    token = user.token  # Assumes token is attached to the user in get_current_user\n    decoded_token = jwt.decode(token, f\"{settings.SECRET_KEY}\", algorithms=[\"HS256\"])\n    expires_at = datetime.utcfromtimestamp(decoded_token[\"exp\"])\n    # Blacklist the token in the database\n    blacklist_token(token, db, expires_at)\n    return {\"message\": \"User has been logged out\"}",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "user_router",
        "kind": 5,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "user_router = APIRouter()\nsettings = get_settings()\n# Todo : extract code to routes and services function\n# Register a new user\n# todo : separate code to service and route \n@user_router.post(\"/register\")\ndef signup(user_data: UserCreate, db: Session = Depends(get_db)):\n    # Check if username or email already exists\n    if db.query(User).filter(User.username == user_data.username).first() or db.query(User).filter(User.email == user_data.email).first():\n        raise HTTPException(status_code=400, detail=\"Username or email already exists\")",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "settings = get_settings()\n# Todo : extract code to routes and services function\n# Register a new user\n# todo : separate code to service and route \n@user_router.post(\"/register\")\ndef signup(user_data: UserCreate, db: Session = Depends(get_db)):\n    # Check if username or email already exists\n    if db.query(User).filter(User.username == user_data.username).first() or db.query(User).filter(User.email == user_data.email).first():\n        raise HTTPException(status_code=400, detail=\"Username or email already exists\")\n    #create a new user",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.auth.schema",
        "description": "app.auth.schema",
        "peekOfCode": "class UserCreate(BaseModel):\n    full_name: str\n    username: str\n    email: EmailStr\n    password: str\n    is_active: bool = True\nclass UserLogin(BaseModel):\n    usernameoremail: str\n    password: str\nclass LoginResponse(BaseModel):",
        "detail": "app.auth.schema",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.auth.schema",
        "description": "app.auth.schema",
        "peekOfCode": "class UserLogin(BaseModel):\n    usernameoremail: str\n    password: str\nclass LoginResponse(BaseModel):\n    user_id: str\n    username: str\n    access_token: str\n    token_type: str\n    full_name:str\n    email:str",
        "detail": "app.auth.schema",
        "documentation": {}
    },
    {
        "label": "LoginResponse",
        "kind": 6,
        "importPath": "app.auth.schema",
        "description": "app.auth.schema",
        "peekOfCode": "class LoginResponse(BaseModel):\n    user_id: str\n    username: str\n    access_token: str\n    token_type: str\n    full_name:str\n    email:str\nclass UserResponse(BaseModel):\n    id: str\n    full_name:str",
        "detail": "app.auth.schema",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "app.auth.schema",
        "description": "app.auth.schema",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: str\n    full_name:str\n    username: str\n    email: EmailStr\n    is_active: bool\n    created_at: datetime\n    updated_at: datetime",
        "detail": "app.auth.schema",
        "documentation": {}
    },
    {
        "label": "list_all_users_service",
        "kind": 2,
        "importPath": "app.auth.services",
        "description": "app.auth.services",
        "peekOfCode": "def list_all_users_service(db) -> list[User]:\n    users = db.query(User).all()\n    return users",
        "detail": "app.auth.services",
        "documentation": {}
    },
    {
        "label": "decodeJWT",
        "kind": 2,
        "importPath": "app.auth.utils",
        "description": "app.auth.utils",
        "peekOfCode": "def decodeJWT(token:str)->dict:\n    try:\n        decoded_token = jwt.decode(token,f'{settings.SECRET_KEY}',algorithms=['HS256'])\n        return decoded_token if decoded_token['exp'] >= time.time() else None\n    except jwt.ExpiredSignatureError:\n        return None  # Token has expired\n    except jwt.InvalidTokenError:\n        return None  # Token is invalid\ndef blacklist_token(token: str, db: Session, expires_at: datetime):\n    blacklisted_token = TokenBlacklist(token=token, expires_at=expires_at)",
        "detail": "app.auth.utils",
        "documentation": {}
    },
    {
        "label": "blacklist_token",
        "kind": 2,
        "importPath": "app.auth.utils",
        "description": "app.auth.utils",
        "peekOfCode": "def blacklist_token(token: str, db: Session, expires_at: datetime):\n    blacklisted_token = TokenBlacklist(token=token, expires_at=expires_at)\n    db.add(blacklisted_token)\n    db.commit()",
        "detail": "app.auth.utils",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.auth.utils",
        "description": "app.auth.utils",
        "peekOfCode": "settings = get_settings()\ndef decodeJWT(token:str)->dict:\n    try:\n        decoded_token = jwt.decode(token,f'{settings.SECRET_KEY}',algorithms=['HS256'])\n        return decoded_token if decoded_token['exp'] >= time.time() else None\n    except jwt.ExpiredSignatureError:\n        return None  # Token has expired\n    except jwt.InvalidTokenError:\n        return None  # Token is invalid\ndef blacklist_token(token: str, db: Session, expires_at: datetime):",
        "detail": "app.auth.utils",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "app.chatbot.prompts",
        "description": "app.chatbot.prompts",
        "peekOfCode": "prompt = ChatPromptTemplate.from_messages(\n    [\n        (\n            \"system\",\n            \"\"\"You are a professional mental health therapist. Your role is to offer compassionate, thoughtful, and clear guidance on mental health issues such as stress, anxiety, depression, and personal growth. \n### Core Constraints for Functionality:\n1. **Confidentiality**: Always maintain confidentiality. Assure users their discussions are private and secure.\n2. **Empathy**: Respond with empathy, making users feel understood, respected, and comfortable to freely express their emotions and concerns.\n3. **Non-Judgmental**: Avoid judgmental language or assumptions. Always affirm the user’s feelings and experiences as valid.\n4. **Active Listening**: Actively engage with users by asking follow-up questions to gain deeper understanding, especially when users present general issues like 'stress' or 'anxiety.' ",
        "detail": "app.chatbot.prompts",
        "documentation": {}
    },
    {
        "label": "chat_router",
        "kind": 5,
        "importPath": "app.chatbot.routes",
        "description": "app.chatbot.routes",
        "peekOfCode": "chat_router = APIRouter()\n@chat_router.post(\"/chat/{session_id}\")\nasync def chatbot(session_id: str, user_message: str,db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    response_stream = stream_chat_session(session_id, user_message)\n    response = \"\".join([token for token in response_stream])\n    return {\"response\": response}\n@chat_router.websocket(\"/ws/chat/{session_id}\")\nasync def websocket_endpoint(websocket: WebSocket, session_id: str, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    await websocket.accept()\n    try:",
        "detail": "app.chatbot.routes",
        "documentation": {}
    },
    {
        "label": "get_session_history",
        "kind": 2,
        "importPath": "app.chatbot.services",
        "description": "app.chatbot.services",
        "peekOfCode": "def get_session_history(session_id: str) -> BaseChatMessageHistory:\n    if session_id not in store:\n        store[session_id] = InMemoryChatMessageHistory()\n    return store[session_id]\n# Initialize the chain\nchain = prompt| model\n# Function to handle chat session with message history\ndef stream_chat_session(session_id: str, user_message: str):\n    config = {\"configurable\": {\"session_id\": session_id}}\n    with_message_history = RunnableWithMessageHistory(",
        "detail": "app.chatbot.services",
        "documentation": {}
    },
    {
        "label": "stream_chat_session",
        "kind": 2,
        "importPath": "app.chatbot.services",
        "description": "app.chatbot.services",
        "peekOfCode": "def stream_chat_session(session_id: str, user_message: str):\n    config = {\"configurable\": {\"session_id\": session_id}}\n    with_message_history = RunnableWithMessageHistory(\n        chain, get_session_history, input_messages_key=\"messages\"\n    )\n    # Stream the response token by token\n    for r in with_message_history.stream(\n        {\n            \"messages\": [HumanMessage(content=user_message)],\n            \"language\": \"English\",",
        "detail": "app.chatbot.services",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app.chatbot.services",
        "description": "app.chatbot.services",
        "peekOfCode": "model = ChatOpenAI(model=\"gpt-3.5-turbo\")\n# In-memory storage for session histories\nstore = {}\n# Function to retrieve session history\ndef get_session_history(session_id: str) -> BaseChatMessageHistory:\n    if session_id not in store:\n        store[session_id] = InMemoryChatMessageHistory()\n    return store[session_id]\n# Initialize the chain\nchain = prompt| model",
        "detail": "app.chatbot.services",
        "documentation": {}
    },
    {
        "label": "store",
        "kind": 5,
        "importPath": "app.chatbot.services",
        "description": "app.chatbot.services",
        "peekOfCode": "store = {}\n# Function to retrieve session history\ndef get_session_history(session_id: str) -> BaseChatMessageHistory:\n    if session_id not in store:\n        store[session_id] = InMemoryChatMessageHistory()\n    return store[session_id]\n# Initialize the chain\nchain = prompt| model\n# Function to handle chat session with message history\ndef stream_chat_session(session_id: str, user_message: str):",
        "detail": "app.chatbot.services",
        "documentation": {}
    },
    {
        "label": "chain",
        "kind": 5,
        "importPath": "app.chatbot.services",
        "description": "app.chatbot.services",
        "peekOfCode": "chain = prompt| model\n# Function to handle chat session with message history\ndef stream_chat_session(session_id: str, user_message: str):\n    config = {\"configurable\": {\"session_id\": session_id}}\n    with_message_history = RunnableWithMessageHistory(\n        chain, get_session_history, input_messages_key=\"messages\"\n    )\n    # Stream the response token by token\n    for r in with_message_history.stream(\n        {",
        "detail": "app.chatbot.services",
        "documentation": {}
    },
    {
        "label": "get_journal_for_user",
        "kind": 2,
        "importPath": "app.journal.dependency",
        "description": "app.journal.dependency",
        "peekOfCode": "def get_journal_for_user(journal_id: str, db: Session = Depends(get_db), user: User = Depends(get_current_user)) -> JournalEntryDB:\n    journal = db.query(JournalEntryDB).filter(JournalEntryDB.id == journal_id).first()\n    if not journal:\n        raise HTTPException(status_code=404, detail=\"Journal entry not found\")\n    if journal.user_id != user.id:\n        raise HTTPException(status_code=403, detail=\"You don't have permission to modify this journal entry\")\n    return journal",
        "detail": "app.journal.dependency",
        "documentation": {}
    },
    {
        "label": "Rating",
        "kind": 6,
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "peekOfCode": "class Rating(int, Enum):\n    awful = 1\n    bad = 2\n    ok = 3\n    good = 4\n    great = 5\nclass JournalEntryBase(BaseModel):\n    most_important_task: str\n    grateful_things: List[str]\n    overall_day_rating: Rating",
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "JournalEntryBase",
        "kind": 6,
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "peekOfCode": "class JournalEntryBase(BaseModel):\n    most_important_task: str\n    grateful_things: List[str]\n    overall_day_rating: Rating\n    overall_mood_rating: Rating\n    completed_most_important_task: bool\n    day_summary: str\n    mood_tags: Optional[List[str]]\nclass JournalEntry(JournalEntryBase):\n    id: UUID",
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "JournalEntry",
        "kind": 6,
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "peekOfCode": "class JournalEntry(JournalEntryBase):\n    id: UUID\n    user_id: UUID\n    entry_date: date\n    class Config:\n        from_attributes = True\n        arbitrary_types_allowed = True\nclass JournalEntryDB(Base):\n    __tablename__ = \"journal_entries\"\n    id = Column(UUID(as_uuid=True), primary_key=True,default=uuid.uuid4)",
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "JournalEntryDB",
        "kind": 6,
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "peekOfCode": "class JournalEntryDB(Base):\n    __tablename__ = \"journal_entries\"\n    id = Column(UUID(as_uuid=True), primary_key=True,default=uuid.uuid4)\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    entry_date = Column(Date, nullable=False,default=date.today)\n    most_important_task = Column(String, nullable=False)\n    # grateful_things = Column(String, nullable=False)\n    grateful_things = Column(JSON, nullable=False)\n    overall_day_rating = Column(SqlEnum(Rating), nullable=False)\n    overall_mood_rating = Column(SqlEnum(Rating), nullable=False)",
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "create_journal",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def create_journal(\n    journal_data: CreateUpdateJournal, \n    db: Session = Depends(get_db), \n    user: User = Depends(get_current_user)\n):\n    # Check if a journal entry already exists for today\n    today = date.today()\n    existing_journal = db.query(JournalEntryDB).filter(\n        JournalEntryDB.user_id == user.id,\n        JournalEntryDB.entry_date == today",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "create_journal_keeps",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def create_journal_keeps(journal_data: CreateUpdateJournal, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    journal_entry = JournalEntryDB(\n        most_important_task=journal_data.most_important_task,\n        grateful_things=journal_data.grateful_things,  \n        # grateful_things=','.join(journal_data.grateful_things),  # Assuming grateful_things is stored as a string\n        overall_day_rating=journal_data.overall_day_rating,\n        overall_mood_rating=journal_data.overall_mood_rating,\n        completed_most_important_task=journal_data.completed_most_important_task,\n        day_summary=journal_data.day_summary,\n        mood_tags=journal_data.mood_tags if journal_data.mood_tags else None,",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "fetch_today_journal",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def fetch_today_journal(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    today = date.today()\n    # today = datetime.now().date()\n    journal = db.query(JournalEntryDB).filter(\n        JournalEntryDB.entry_date == today,\n        JournalEntryDB.user_id == user.id\n    ).first()\n    if not journal:\n        raise HTTPException(status_code=404, detail=\"No journal entry found for today\")\n    return {",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "list_journals",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def list_journals(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    journals = db.query(JournalEntryDB).filter(JournalEntryDB.user_id == user.id).all()\n    data = []\n    for journal in journals:\n        # Safely parse `grateful_things`\n        try:\n            grateful_things = json.loads(journal.grateful_things) if journal.grateful_things else None\n        except json.JSONDecodeError:\n            grateful_things = None\n        # Safely parse `mood_tags`",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "view_journal",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def view_journal(journal_id: str, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    journal = db.query(JournalEntryDB).filter(JournalEntryDB.id == journal_id, JournalEntryDB.user_id == user.id).first()\n    if not journal:\n        raise HTTPException(status_code=404, detail=\"Journal entry not found\")\n    return {\n        \"data\": {\n            \"id\": str(journal.id),\n            \"user_id\": str(journal.user_id),\n            \"entry_date\": journal.entry_date.isoformat(),\n            \"most_important_task\": journal.most_important_task,",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "edit_journal",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def edit_journal(\n    journal_id: str, \n    journal_data: UpdateJournal, \n    journal: JournalEntryDB = Depends(get_journal_for_user), \n    db: Session = Depends(get_db)\n):\n    # Update only the provided fields\n    if journal_data.most_important_task:\n        journal.most_important_task = journal_data.most_important_task\n    if journal_data.grateful_things:",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "delete_journal",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def delete_journal(journal: JournalEntryDB = Depends(get_journal_for_user), db: Session = Depends(get_db)):\n    db.delete(journal)\n    db.commit()\n    return {\n        \"message\": \"Journal entry deleted successfully\"\n    }",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "journal_router",
        "kind": 5,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "journal_router = APIRouter()\n@journal_router.post('/')\ndef create_journal(\n    journal_data: CreateUpdateJournal, \n    db: Session = Depends(get_db), \n    user: User = Depends(get_current_user)\n):\n    # Check if a journal entry already exists for today\n    today = date.today()\n    existing_journal = db.query(JournalEntryDB).filter(",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "Rating",
        "kind": 6,
        "importPath": "app.journal.schema",
        "description": "app.journal.schema",
        "peekOfCode": "class Rating(int, Enum):\n    awful = 1\n    bad = 2\n    ok = 3\n    good = 4\n    great = 5\nclass CreateUpdateJournal(BaseModel):\n    most_important_task: str\n    grateful_things: List[str]\n    overall_day_rating: Rating",
        "detail": "app.journal.schema",
        "documentation": {}
    },
    {
        "label": "CreateUpdateJournal",
        "kind": 6,
        "importPath": "app.journal.schema",
        "description": "app.journal.schema",
        "peekOfCode": "class CreateUpdateJournal(BaseModel):\n    most_important_task: str\n    grateful_things: List[str]\n    overall_day_rating: Rating\n    overall_mood_rating: Rating\n    completed_most_important_task: bool\n    day_summary: str\n    mood_tags: Optional[List[str]] = None\nclass UpdateJournal(CreateUpdateJournal):\n    most_important_task: Optional[str] = None",
        "detail": "app.journal.schema",
        "documentation": {}
    },
    {
        "label": "UpdateJournal",
        "kind": 6,
        "importPath": "app.journal.schema",
        "description": "app.journal.schema",
        "peekOfCode": "class UpdateJournal(CreateUpdateJournal):\n    most_important_task: Optional[str] = None\n    grateful_things: Optional[List[str]] = None\n    overall_day_rating: Optional[Rating] = None\n    overall_mood_rating: Optional[Rating] = None\n    completed_most_important_task: Optional[bool] = None\n    day_summary: Optional[str] = None\n    mood_tags: Optional[List[str]] = None\nclass JournalResponse(BaseModel):\n    id: str",
        "detail": "app.journal.schema",
        "documentation": {}
    },
    {
        "label": "JournalResponse",
        "kind": 6,
        "importPath": "app.journal.schema",
        "description": "app.journal.schema",
        "peekOfCode": "class JournalResponse(BaseModel):\n    id: str\n    user_id: str\n    entry_date: date\n    most_important_task: str\n    grateful_things: List[str]\n    overall_day_rating: Rating\n    overall_mood_rating: Rating\n    completed_most_important_task: bool\n    day_summary: str",
        "detail": "app.journal.schema",
        "documentation": {}
    },
    {
        "label": "list_all_journals_service",
        "kind": 2,
        "importPath": "app.journal.services",
        "description": "app.journal.services",
        "peekOfCode": "def list_all_journals_service(db: Session = Depends(get_db)) -> list[JournalEntry]:\n    journals = db.query(JournalEntry).all()\n    return journals",
        "detail": "app.journal.services",
        "documentation": {}
    },
    {
        "label": "list_all_stats",
        "kind": 2,
        "importPath": "app.stats.routes",
        "description": "app.stats.routes",
        "peekOfCode": "def list_all_stats(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    \"\"\"Returns stats for all days and weekly trends.\"\"\"\n    try:\n        stats = get_stats_for_user(db, user)\n        return stats\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n@stats_router.get(\"/weekly\", response_model=WeeklyStatsResponse)\ndef list_weekly_trends(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    \"\"\"Returns trends for the past seven days, including completion percentage.\"\"\"",
        "detail": "app.stats.routes",
        "documentation": {}
    },
    {
        "label": "list_weekly_trends",
        "kind": 2,
        "importPath": "app.stats.routes",
        "description": "app.stats.routes",
        "peekOfCode": "def list_weekly_trends(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    \"\"\"Returns trends for the past seven days, including completion percentage.\"\"\"\n    try:\n        all_stats = get_stats_for_user(db, user)\n        return all_stats.weekly_trends\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))",
        "detail": "app.stats.routes",
        "documentation": {}
    },
    {
        "label": "stats_router",
        "kind": 5,
        "importPath": "app.stats.routes",
        "description": "app.stats.routes",
        "peekOfCode": "stats_router = APIRouter()\n@stats_router.get(\"/\", response_model=StatsResponse)\ndef list_all_stats(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    \"\"\"Returns stats for all days and weekly trends.\"\"\"\n    try:\n        stats = get_stats_for_user(db, user)\n        return stats\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n@stats_router.get(\"/weekly\", response_model=WeeklyStatsResponse)",
        "detail": "app.stats.routes",
        "documentation": {}
    },
    {
        "label": "DailyStats",
        "kind": 6,
        "importPath": "app.stats.schemas",
        "description": "app.stats.schemas",
        "peekOfCode": "class DailyStats(BaseModel):\n    date: str\n    day: str\n    completed_activities: int\n    incomplete_activities: int\n    average_day_rating: Optional[float] = 0\n    mood_rating: Optional[int] = 0  # Assuming mood rating is an integer from 1 to 5\nclass WeeklyStatsResponse(BaseModel):\n    daily_trends: List[DailyStats]\n    completion_percentage: float  # percentage of completed activities over the week",
        "detail": "app.stats.schemas",
        "documentation": {}
    },
    {
        "label": "WeeklyStatsResponse",
        "kind": 6,
        "importPath": "app.stats.schemas",
        "description": "app.stats.schemas",
        "peekOfCode": "class WeeklyStatsResponse(BaseModel):\n    daily_trends: List[DailyStats]\n    completion_percentage: float  # percentage of completed activities over the week\nclass StatsResponse(BaseModel):\n    all_days_trends: List[DailyStats]\n    weekly_trends: WeeklyStatsResponse",
        "detail": "app.stats.schemas",
        "documentation": {}
    },
    {
        "label": "StatsResponse",
        "kind": 6,
        "importPath": "app.stats.schemas",
        "description": "app.stats.schemas",
        "peekOfCode": "class StatsResponse(BaseModel):\n    all_days_trends: List[DailyStats]\n    weekly_trends: WeeklyStatsResponse",
        "detail": "app.stats.schemas",
        "documentation": {}
    },
    {
        "label": "get_daily_stats",
        "kind": 2,
        "importPath": "app.stats.services",
        "description": "app.stats.services",
        "peekOfCode": "def get_daily_stats(db: Session, user_id: str) -> List[DailyStats]:\n    \"\"\"Returns detailed stats per day.\"\"\"\n    daily_stats = []\n    # Query activities and journal entries per day\n    start_date = db.query(JournalEntryDB.entry_date).order_by(JournalEntryDB.entry_date).first()\n    if not start_date:\n        return daily_stats\n    end_date = datetime.now().date()\n    date_range = (end_date - start_date[0]).days + 1\n    for i in range(date_range):",
        "detail": "app.stats.services",
        "documentation": {}
    },
    {
        "label": "get_weekly_stats",
        "kind": 2,
        "importPath": "app.stats.services",
        "description": "app.stats.services",
        "peekOfCode": "def get_weekly_stats(daily_stats: List[DailyStats]) -> WeeklyStatsResponse:\n    \"\"\"Calculate weekly trends and completion percentage.\"\"\"\n    last_seven_days = daily_stats[-7:] if len(daily_stats) >= 7 else daily_stats\n    total_completed = sum(day.completed_activities for day in last_seven_days)\n    total_activities = sum(day.completed_activities + day.incomplete_activities for day in last_seven_days)\n    completion_percentage = (total_completed / total_activities * 100) if total_activities > 0 else 0\n    return WeeklyStatsResponse(\n        daily_trends=last_seven_days,\n        completion_percentage=completion_percentage\n    )",
        "detail": "app.stats.services",
        "documentation": {}
    },
    {
        "label": "get_stats_for_user",
        "kind": 2,
        "importPath": "app.stats.services",
        "description": "app.stats.services",
        "peekOfCode": "def get_stats_for_user(db: Session, user: User) -> StatsResponse:\n    \"\"\"Fetch and return all days and weekly stats for the user.\"\"\"\n    daily_stats = get_daily_stats(db, user.id)\n    weekly_stats = get_weekly_stats(daily_stats)\n    return StatsResponse(\n        all_days_trends=daily_stats,\n        weekly_trends=weekly_stats\n    )",
        "detail": "app.stats.services",
        "documentation": {}
    },
    {
        "label": "test_create_user",
        "kind": 2,
        "importPath": "tests.auth.test_auth",
        "description": "tests.auth.test_auth",
        "peekOfCode": "def test_create_user():\n    user = User(username= \"user\",email=\"user@email.com\",hashed_password=\"password\")\n    assert user.username == \"user\"\n    assert user.email == \"user@email.com\"\n    assert user.hash_password == \"password\"",
        "detail": "tests.auth.test_auth",
        "documentation": {}
    },
    {
        "label": "test_create_journal_entry",
        "kind": 2,
        "importPath": "tests.journal.test_journal",
        "description": "tests.journal.test_journal",
        "peekOfCode": "def test_create_journal_entry():\n    user = User(username=\"user\", email=\"user@gmail.com\", hashed_password=\"password\")\n    journal_entry = JournalEntry(\n        user=user,\n        most_important_task=\"Task 1\",\n        grateful_things=[\"Thing 1\", \"Thing 2\",\"Thing 3\"],\n        overall_day_rating=\"good\",\n        overall_mood_rating=\"bad\",\n        completed_most_important_task=True,\n        day_summary=\"Summary\",",
        "detail": "tests.journal.test_journal",
        "documentation": {}
    },
    {
        "label": "test_user_journal_entries_relationship",
        "kind": 2,
        "importPath": "tests.journal.test_journal",
        "description": "tests.journal.test_journal",
        "peekOfCode": "def test_user_journal_entries_relationship():\n    user = User(username=\"user\", email=\"user@gmail.com\", hashed_password=\"password\")\n    journal_entry = JournalEntry(\n        user=user,\n        most_important_task=\"Task 1\",\n        grateful_things=[\"Thing 1\", \"Thing 2\"],\n        overall_day_rating=\"good\",\n        overall_mood_rating=\"bad\",\n        completed_most_important_task=True,\n        day_summary=\"Summary\",",
        "detail": "tests.journal.test_journal",
        "documentation": {}
    },
    {
        "label": "test_journal_entry_default_values",
        "kind": 2,
        "importPath": "tests.journal.test_journal",
        "description": "tests.journal.test_journal",
        "peekOfCode": "def test_journal_entry_default_values():\n    user = User(username=\"user\", email=\"user@gmail.com\", hashed_password=\"password\")\n    journal_entry = JournalEntry(\n        user=user,\n        most_important_task=\"Task 1\",\n        grateful_things=[\"Thing 1\", \"Thing 2\"],\n        overall_day_rating=\"good\",\n        overall_mood_rating=\"bad\",\n        completed_most_important_task=True,\n        day_summary=\"Summary\",",
        "detail": "tests.journal.test_journal",
        "documentation": {}
    },
    {
        "label": "test_journal_entry_attributes",
        "kind": 2,
        "importPath": "tests.journal.test_journal",
        "description": "tests.journal.test_journal",
        "peekOfCode": "def test_journal_entry_attributes():\n    user = User(username=\"user\", email=\"user@gmail.com\", hashed_password=\"password\")\n    journal_entry = JournalEntry(\n        user=user,\n        most_important_task=\"Task 1\",\n        grateful_things=[\"Thing 1\", \"Thing 2\"],\n        overall_day_rating=\"good\",\n         overall_mood_rating=\"bad\",\n        completed_most_important_task=True,\n        day_summary=\"Summary\",",
        "detail": "tests.journal.test_journal",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Settings(BaseSettings):\n    DB_HOST: str\n    DB_NAME: str\n    DB_USERNAME: str\n    DB_PASSWORD: str\n    PGADMIN_EMAIL: str\n    PGADMIN_PASSWORD: str\n    SECRET_KEY: str\n    TOKEN_EXPIRATION_HOURS: int\n    OPENAI_API_KEY: str",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_app_env",
        "kind": 2,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "def get_app_env():\n    app_env = os.getenv('APP_ENV','dev')\n    if(app_env == 'prod'):\n        return '.env.prod'\n    else:\n        return '.env'\nclass Settings(BaseSettings):\n    DB_HOST: str\n    DB_NAME: str\n    DB_USERNAME: str",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "kind": 2,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "def get_settings() -> Settings:\n    return Settings()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "settings = get_settings()\nDB_URL = f'postgresql://{settings.DB_USERNAME}:{settings.DB_PASSWORD}@{settings.DB_HOST}/{settings.DB_NAME}'\nengine = create_engine(DB_URL)\nSessionLocal = sessionmaker(autoflush=False,autocommit = False ,bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "DB_URL = f'postgresql://{settings.DB_USERNAME}:{settings.DB_PASSWORD}@{settings.DB_HOST}/{settings.DB_NAME}'\nengine = create_engine(DB_URL)\nSessionLocal = sessionmaker(autoflush=False,autocommit = False ,bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(DB_URL)\nSessionLocal = sessionmaker(autoflush=False,autocommit = False ,bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autoflush=False,autocommit = False ,bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndef get_current_user(token:str = Depends(JWTBearer())) -> User:\n    try:\n        payload = jwt.decode(token, f'{settings.SECRET_KEY}', algorithms=['HS256'])\n        user_id = payload.get('sub')",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "def get_current_user(token:str = Depends(JWTBearer())) -> User:\n    try:\n        payload = jwt.decode(token, f'{settings.SECRET_KEY}', algorithms=['HS256'])\n        user_id = payload.get('sub')\n        db = SessionLocal()\n        user = db.query(User).filter(User.id == user_id).first()\n        return user\n        # if not user:\n        #     raise HTTPException(status_code=404, detail=\"User not found\")\n        # return user, token ",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "settings = get_settings()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndef get_current_user(token:str = Depends(JWTBearer())) -> User:\n    try:\n        payload = jwt.decode(token, f'{settings.SECRET_KEY}', algorithms=['HS256'])",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "mentora_root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def mentora_root():\n    return {\n        \"message\": \"Welcome to Mentora Backend App\",\n        \"documentation\": \"add '/docs' to the url\"\n    }\n# endpoint to check mentora health \n@app.get(\"/health/check\")\ndef mentora_detailed_health_check():\n    health_status = {\n        \"app\": True,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "mentora_detailed_health_check",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def mentora_detailed_health_check():\n    health_status = {\n        \"app\": True,\n        \"database\": check_database_connection(),\n        \"dependencies\": check_dependencies()\n    }\n    if all(health_status.values()):\n        return {\"status\": \"healthy\"}\n    else:\n        return Response(content={\"status\": \"unhealthy\"}, media_type=\"application/json\", status_code=503)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check_db_connection2_activities",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check_db_connection2_activities():\n    return generate_activities_custom_for_all_users()\n# @app.on_event(\"shutdown\")\n# async def shutdown():\n#     await shutdown_scheduler()\n# The routes for users,journals,chatbot,activities\napp.include_router(user_router,prefix='/mentora/api/v1/auth',tags=[\"AUTH\"])\napp.include_router(journal_router,prefix=\"/mentora/api/v1/journals\",tags=[\"JOURNALS\"])\napp.include_router(chat_router,prefix=\"/mentora/api/v1/chatbot\",tags=[\"CHATBOT\"])\napp.include_router(activity_router,prefix=\"/mentora/api/v1/activities\",tags=[\"ACTIVITIES\"])",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check_database_connection",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check_database_connection():\n    # database connection check\n    #\n    return True\ndef check_dependencies():\n    # dependency check\n    return True\nif __name__ == \"__main__\":\n    # start_scheduler()\n    scheduler_process = multiprocessing.Process(target=start_scheduler)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check_dependencies",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check_dependencies():\n    # dependency check\n    return True\nif __name__ == \"__main__\":\n    # start_scheduler()\n    scheduler_process = multiprocessing.Process(target=start_scheduler)\n    scheduler_process.start()\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8400,reload=True)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app =  FastAPI(\n    title=\"Mentora Backend App\",\n    description=\"Backend of Mentora : An AI powered mental health companion app\",\n    summary=\"API endpoints for mental health journaling,therapist chatbot,activity generation,Statistics, and user management\",\n    contact={\n        \"name\": \"Tony Kanyamuka\",\n        \"url\": \"https://www.Mentora.com\",\n        \"email\": \"tonykanyamuka@icloud.com\",\n        \"phone\": \"+265996008328\"\n    },",
        "detail": "main",
        "documentation": {}
    }
]