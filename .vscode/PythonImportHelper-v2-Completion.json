[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "isExtraImport": true,
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "JournalEntryDB",
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "isExtraImport": true,
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "JournalEntry",
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "isExtraImport": true,
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "dependencies",
        "description": "dependencies",
        "isExtraImport": true,
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database ",
        "description": "database ",
        "isExtraImport": true,
        "detail": "database ",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "importPath": "app.auth.bearer",
        "description": "app.auth.bearer",
        "isExtraImport": true,
        "detail": "app.auth.bearer",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "user_router",
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "isExtraImport": true,
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "journal_router",
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "isExtraImport": true,
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.faa54a879958_created_db_models",
        "description": "alembic.versions.faa54a879958_created_db_models",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('id', sa.UUID(), nullable=False),\n    sa.Column('username', sa.String(), nullable=True),\n    sa.Column('email', sa.String(), nullable=True),\n    sa.Column('hashed_password', sa.String(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)",
        "detail": "alembic.versions.faa54a879958_created_db_models",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.faa54a879958_created_db_models",
        "description": "alembic.versions.faa54a879958_created_db_models",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('journal_entries')\n    op.drop_index(op.f('ix_users_username'), table_name='users')\n    op.drop_index(op.f('ix_users_email'), table_name='users')\n    op.drop_table('users')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.faa54a879958_created_db_models",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\nsection = config.config_ini_section\nconfig.set_section_option(section,\"DB_NAME\",envConfig(\"DB_NAME\"))\nconfig.set_section_option(section,\"DB_USERNAME\",envConfig(\"DB_USERNAME\"))\nconfig.set_section_option(section,\"DB_PASSWORD\",envConfig(\"DB_PASSWORD\"))\n# add your model's MetaData object here",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "section",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "section = config.config_ini_section\nconfig.set_section_option(section,\"DB_NAME\",envConfig(\"DB_NAME\"))\nconfig.set_section_option(section,\"DB_USERNAME\",envConfig(\"DB_USERNAME\"))\nconfig.set_section_option(section,\"DB_PASSWORD\",envConfig(\"DB_PASSWORD\"))\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "kind": 6,
        "importPath": "app.auth.bearer",
        "description": "app.auth.bearer",
        "peekOfCode": "class JWTBearer(HTTPBearer):\n    def __init__(self, auto_error: bool = True):\n        super(JWTBearer, self).__init__(auto_error=auto_error)\n    async def __call__(self, request: Request):\n        credentials: HTTPAuthorizationCredentials = await super(JWTBearer, self).__call__(request)\n        if credentials:\n            if not credentials.scheme == \"Bearer\":\n                raise HTTPException(status_code=403, detail=\"Invalid authentication scheme.\")\n            if not self.verify_jwt(credentials.credentials):\n                raise HTTPException(status_code=403, detail=\"Invalid token or expired token.\")",
        "detail": "app.auth.bearer",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.auth.models",
        "description": "app.auth.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    username = Column(String, unique=True, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    # journals = relationship(\"Journal\", back_populates=\"author\")\n    def hash_password(self, password: str):\n        self.hashed_password = bcrypt.hashpw(\n            password.encode(\"utf-8\"), bcrypt.gensalt()",
        "detail": "app.auth.models",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def signup(user_data: UserCreate, db: Session = Depends(get_db)):\n    user = User(username=user_data.username, email=user_data.email)\n    user.hash_password(user_data.password)\n    db.add(user)\n    db.commit()\n    return {\"message\": \"User has been Created\"}\n# Login\n@user_router.post(\"/login\")\ndef login(user_data: UserLogin, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.username == user_data.username).first()",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def login(user_data: UserLogin, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.username == user_data.username).first()\n    if user is None or not user.verify_password(user_data.password):\n        raise HTTPException(status_code=401, detail=\"Invalid Credentials\")\n    token = user.generate_token()\n    return Token(access_token=token, token_type=\"bearer\")",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "user_router",
        "kind": 5,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "user_router = APIRouter()\n# Register a new user\n@user_router.post(\"/signup\")\ndef signup(user_data: UserCreate, db: Session = Depends(get_db)):\n    user = User(username=user_data.username, email=user_data.email)\n    user.hash_password(user_data.password)\n    db.add(user)\n    db.commit()\n    return {\"message\": \"User has been Created\"}\n# Login",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.auth.schema",
        "description": "app.auth.schema",
        "peekOfCode": "class UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\nclass UserLogin(BaseModel):\n    username: str\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str",
        "detail": "app.auth.schema",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.auth.schema",
        "description": "app.auth.schema",
        "peekOfCode": "class UserLogin(BaseModel):\n    username: str\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str",
        "detail": "app.auth.schema",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.auth.schema",
        "description": "app.auth.schema",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str",
        "detail": "app.auth.schema",
        "documentation": {}
    },
    {
        "label": "decodeJWT",
        "kind": 2,
        "importPath": "app.auth.utils",
        "description": "app.auth.utils",
        "peekOfCode": "def decodeJWT(token:str)->dict:\n    try:\n        decoded_token = jwt.decode(token,f'{settings.SECRET_KEY}',algorithms=['HS256'])\n        return decoded_token if decoded_token['exp'] >= time.time() else None\n    except jwt.ExpiredSignatureError:\n        return None  # Token has expired\n    except jwt.InvalidTokenError:\n        return None  # Token is invalid",
        "detail": "app.auth.utils",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.auth.utils",
        "description": "app.auth.utils",
        "peekOfCode": "settings = get_settings()\ndef decodeJWT(token:str)->dict:\n    try:\n        decoded_token = jwt.decode(token,f'{settings.SECRET_KEY}',algorithms=['HS256'])\n        return decoded_token if decoded_token['exp'] >= time.time() else None\n    except jwt.ExpiredSignatureError:\n        return None  # Token has expired\n    except jwt.InvalidTokenError:\n        return None  # Token is invalid",
        "detail": "app.auth.utils",
        "documentation": {}
    },
    {
        "label": "get_journal_for_user",
        "kind": 2,
        "importPath": "app.journal.dependency",
        "description": "app.journal.dependency",
        "peekOfCode": "def get_journal_for_user(journal_id: str, db: Session = Depends(get_db), user: User = Depends(get_current_user)) -> JournalEntryDB:\n    journal = db.query(JournalEntryDB).filter(JournalEntryDB.id == journal_id).first()\n    if not journal:\n        raise HTTPException(status_code=404, detail=\"Journal entry not found\")\n    if journal.user_id != user.id:\n        raise HTTPException(status_code=403, detail=\"You don't have permission to modify this journal entry\")\n    return journal",
        "detail": "app.journal.dependency",
        "documentation": {}
    },
    {
        "label": "MoodRating",
        "kind": 6,
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "peekOfCode": "class MoodRating(str, Enum):\n    awful = 1\n    bad = 2\n    ok = 3\n    good = 4\n    great = 5\nclass JournalEntryBase(BaseModel):\n    most_important_task: str\n    grateful_things: List[str]\n    overall_day_rating: MoodRating",
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "JournalEntryBase",
        "kind": 6,
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "peekOfCode": "class JournalEntryBase(BaseModel):\n    most_important_task: str\n    grateful_things: List[str]\n    overall_day_rating: MoodRating\n    overall_mood_rating: MoodRating\n    completed_most_important_task: bool\n    day_summary: str\n    mood_tags: Optional[List[str]]\nclass JournalEntry(JournalEntryBase):\n    id: UUID",
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "JournalEntry",
        "kind": 6,
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "peekOfCode": "class JournalEntry(JournalEntryBase):\n    id: UUID\n    user_id: UUID\n    entry_date: str\n    class Config:\n        from_attributes = True\n        arbitrary_types_allowed = True\nclass JournalEntryDB(Base):\n    __tablename__ = \"journal_entries\"\n    id = Column(UUID(as_uuid=True), primary_key=True,default=uuid.uuid4)",
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "JournalEntryDB",
        "kind": 6,
        "importPath": "app.journal.models",
        "description": "app.journal.models",
        "peekOfCode": "class JournalEntryDB(Base):\n    __tablename__ = \"journal_entries\"\n    id = Column(UUID(as_uuid=True), primary_key=True,default=uuid.uuid4)\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    entry_date = Column(Date, nullable=False,default=date.today)\n    most_important_task = Column(String, nullable=False)\n    grateful_things = Column(String, nullable=False)\n    overall_day_rating = Column(SqlEnum(MoodRating), nullable=False)\n    overall_mood_rating = Column(SqlEnum(MoodRating), nullable=False)\n    completed_most_important_task = Column(Boolean, nullable=False)",
        "detail": "app.journal.models",
        "documentation": {}
    },
    {
        "label": "create_journal",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def create_journal(journal_data: CreateUpdateJournal, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    journal_entry = JournalEntryDB(\n        most_important_task=journal_data.most_important_task,\n        grateful_things=','.join(journal_data.grateful_things),  # Assuming grateful_things is stored as a string\n        overall_day_rating=journal_data.overall_day_rating,\n        overall_mood_rating=journal_data.overall_mood_rating,\n        completed_most_important_task=journal_data.completed_most_important_task,\n        day_summary=journal_data.day_summary,\n        mood_tags=','.join(journal_data.mood_tags) if journal_data.mood_tags else None,\n        user_id=user.id",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "list_journals",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def list_journals(db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    journals = db.query(JournalEntryDB).filter(JournalEntryDB.user_id == user.id).all()\n    return {\n        \"data\": [journal.__dict__ for journal in journals]\n    }\n# View a specific journal entry\n@journal_router.get('/{journal_id}')\ndef view_journal(journal_id: str, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    journal = db.query(JournalEntryDB).filter(JournalEntryDB.id == journal_id, JournalEntryDB.user_id == user.id).first()\n    if not journal:",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "view_journal",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def view_journal(journal_id: str, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    journal = db.query(JournalEntryDB).filter(JournalEntryDB.id == journal_id, JournalEntryDB.user_id == user.id).first()\n    if not journal:\n        raise HTTPException(status_code=404, detail=\"Journal entry not found\")\n    return {\n        \"data\": journal.__dict__\n    }\n# Update a journal entry\n@journal_router.put('/{journal_id}')\ndef edit_journal(journal_id: str, journal_data: UpdateJournal, journal: JournalEntryDB = Depends(get_journal_for_user), db: Session = Depends(get_db)):",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "edit_journal",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def edit_journal(journal_id: str, journal_data: UpdateJournal, journal: JournalEntryDB = Depends(get_journal_for_user), db: Session = Depends(get_db)):\n    if journal_data.most_important_task:\n        journal.most_important_task = journal_data.most_important_task\n    if journal_data.grateful_things:\n        journal.grateful_things = ','.join(journal_data.grateful_things)\n    if journal_data.overall_day_rating:\n        journal.overall_day_rating = journal_data.overall_day_rating\n    if journal_data.overall_mood_rating:\n        journal.overall_mood_rating = journal_data.overall_mood_rating\n    if journal_data.completed_most_important_task is not None:",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "delete_journal",
        "kind": 2,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "def delete_journal(journal: JournalEntryDB = Depends(get_journal_for_user), db: Session = Depends(get_db)):\n    db.delete(journal)\n    db.commit()\n    return {\n        \"message\": \"Journal entry deleted successfully\"\n    }",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "journal_router",
        "kind": 5,
        "importPath": "app.journal.routes",
        "description": "app.journal.routes",
        "peekOfCode": "journal_router = APIRouter()\n# Create journal entry\n@journal_router.post('/')\ndef create_journal(journal_data: CreateUpdateJournal, db: Session = Depends(get_db), user: User = Depends(get_current_user)):\n    journal_entry = JournalEntryDB(\n        most_important_task=journal_data.most_important_task,\n        grateful_things=','.join(journal_data.grateful_things),  # Assuming grateful_things is stored as a string\n        overall_day_rating=journal_data.overall_day_rating,\n        overall_mood_rating=journal_data.overall_mood_rating,\n        completed_most_important_task=journal_data.completed_most_important_task,",
        "detail": "app.journal.routes",
        "documentation": {}
    },
    {
        "label": "MoodRating",
        "kind": 6,
        "importPath": "app.journal.schema",
        "description": "app.journal.schema",
        "peekOfCode": "class MoodRating(str, Enum):\n    awful = \"awful\"\n    bad = \"bad\"\n    ok = \"ok\"\n    good = \"good\"\n    great = \"great\"\nclass CreateUpdateJournal(BaseModel):\n    most_important_task: str\n    grateful_things: List[str]\n    overall_day_rating: MoodRating",
        "detail": "app.journal.schema",
        "documentation": {}
    },
    {
        "label": "CreateUpdateJournal",
        "kind": 6,
        "importPath": "app.journal.schema",
        "description": "app.journal.schema",
        "peekOfCode": "class CreateUpdateJournal(BaseModel):\n    most_important_task: str\n    grateful_things: List[str]\n    overall_day_rating: MoodRating\n    overall_mood_rating: MoodRating\n    completed_most_important_task: bool\n    day_summary: str\n    mood_tags: Optional[List[str]] = None\nclass UpdateJournal(CreateUpdateJournal):\n    most_important_task: Optional[str] = None",
        "detail": "app.journal.schema",
        "documentation": {}
    },
    {
        "label": "UpdateJournal",
        "kind": 6,
        "importPath": "app.journal.schema",
        "description": "app.journal.schema",
        "peekOfCode": "class UpdateJournal(CreateUpdateJournal):\n    most_important_task: Optional[str] = None\n    grateful_things: Optional[List[str]] = None\n    overall_day_rating: Optional[MoodRating] = None\n    overall_mood_rating: Optional[MoodRating] = None\n    completed_most_important_task: Optional[bool] = None\n    day_summary: Optional[str] = None\n    mood_tags: Optional[List[str]] = None",
        "detail": "app.journal.schema",
        "documentation": {}
    },
    {
        "label": "test_create_user",
        "kind": 2,
        "importPath": "tests.auth.test_auth",
        "description": "tests.auth.test_auth",
        "peekOfCode": "def test_create_user():\n    user = User(username= \"user\",email=\"user@email.com\",hashed_password=\"password\")\n    assert user.username == \"user\"\n    assert user.email == \"user@email.com\"\n    assert user.hash_password == \"password\"",
        "detail": "tests.auth.test_auth",
        "documentation": {}
    },
    {
        "label": "test_create_journal_entry",
        "kind": 2,
        "importPath": "tests.journal.test_journal",
        "description": "tests.journal.test_journal",
        "peekOfCode": "def test_create_journal_entry():\n    user = User(username=\"user\", email=\"user@gmail.com\", hashed_password=\"password\")\n    journal_entry = JournalEntry(\n        user=user,\n        most_important_task=\"Task 1\",\n        grateful_things=[\"Thing 1\", \"Thing 2\",\"Thing 3\"],\n        overall_day_rating=\"good\",\n        overall_mood_rating=\"bad\",\n        completed_most_important_task=True,\n        day_summary=\"Summary\",",
        "detail": "tests.journal.test_journal",
        "documentation": {}
    },
    {
        "label": "test_user_journal_entries_relationship",
        "kind": 2,
        "importPath": "tests.journal.test_journal",
        "description": "tests.journal.test_journal",
        "peekOfCode": "def test_user_journal_entries_relationship():\n    user = User(username=\"user\", email=\"user@gmail.com\", hashed_password=\"password\")\n    journal_entry = JournalEntry(\n        user=user,\n        most_important_task=\"Task 1\",\n        grateful_things=[\"Thing 1\", \"Thing 2\"],\n        overall_day_rating=\"good\",\n        overall_mood_rating=\"bad\",\n        completed_most_important_task=True,\n        day_summary=\"Summary\",",
        "detail": "tests.journal.test_journal",
        "documentation": {}
    },
    {
        "label": "test_journal_entry_default_values",
        "kind": 2,
        "importPath": "tests.journal.test_journal",
        "description": "tests.journal.test_journal",
        "peekOfCode": "def test_journal_entry_default_values():\n    user = User(username=\"user\", email=\"user@gmail.com\", hashed_password=\"password\")\n    journal_entry = JournalEntry(\n        user=user,\n        most_important_task=\"Task 1\",\n        grateful_things=[\"Thing 1\", \"Thing 2\"],\n        overall_day_rating=\"good\",\n        overall_mood_rating=\"bad\",\n        completed_most_important_task=True,\n        day_summary=\"Summary\",",
        "detail": "tests.journal.test_journal",
        "documentation": {}
    },
    {
        "label": "test_journal_entry_attributes",
        "kind": 2,
        "importPath": "tests.journal.test_journal",
        "description": "tests.journal.test_journal",
        "peekOfCode": "def test_journal_entry_attributes():\n    user = User(username=\"user\", email=\"user@gmail.com\", hashed_password=\"password\")\n    journal_entry = JournalEntry(\n        user=user,\n        most_important_task=\"Task 1\",\n        grateful_things=[\"Thing 1\", \"Thing 2\"],\n        overall_day_rating=\"good\",\n         overall_mood_rating=\"bad\",\n        completed_most_important_task=True,\n        day_summary=\"Summary\",",
        "detail": "tests.journal.test_journal",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Settings(BaseSettings):\n    DB_NAME: str\n    DB_USERNAME: str\n    DB_PASSWORD: str\n    PGADMIN_EMAIL: str\n    PGADMIN_PASSWORD: str\n    SECRET_KEY: str\n    TOKEN_EXPIRATION_HOURS: int\n    class Config:\n        env_file: str = \".env\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "kind": 2,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "def get_settings() -> Settings:\n    return Settings()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "settings = get_settings()\nDB_URL = f'postgresql://{settings.DB_USERNAME}:{settings.DB_PASSWORD}@localhost:5432/{settings.DB_NAME}'\nengine = create_engine(DB_URL)\nSessionLocal = sessionmaker(autoflush=False,autocommit = False ,bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "DB_URL = f'postgresql://{settings.DB_USERNAME}:{settings.DB_PASSWORD}@localhost:5432/{settings.DB_NAME}'\nengine = create_engine(DB_URL)\nSessionLocal = sessionmaker(autoflush=False,autocommit = False ,bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(DB_URL)\nSessionLocal = sessionmaker(autoflush=False,autocommit = False ,bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autoflush=False,autocommit = False ,bind=engine)\nBase = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "Base = declarative_base()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndef get_current_user(token:str = Depends(JWTBearer())) -> User:\n    try:\n        payload = jwt.decode(token, f'{settings.SECRET_KEY}', algorithms=['HS256'])\n        user_id = payload.get('sub')",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "def get_current_user(token:str = Depends(JWTBearer())) -> User:\n    try:\n        payload = jwt.decode(token, f'{settings.SECRET_KEY}', algorithms=['HS256'])\n        user_id = payload.get('sub')\n        db = SessionLocal()\n        return db.query(User).filter(User.id == user_id).first()\n    except(jwt.PyJWTError, AttributeError):\n        return  HTTPException(status_code=\"Invalid token\")",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "dependencies",
        "description": "dependencies",
        "peekOfCode": "settings = get_settings()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\ndef get_current_user(token:str = Depends(JWTBearer())) -> User:\n    try:\n        payload = jwt.decode(token, f'{settings.SECRET_KEY}', algorithms=['HS256'])",
        "detail": "dependencies",
        "documentation": {}
    },
    {
        "label": "mentora_root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def mentora_root():\n    return {\n        \"message\": \"Welcome to Mentora Backend App\",\n        \"documentation\": \"add '/docs' to the url\"\n    }\n# endpoint to check mentora health \n@app.get(\"/health/check\")\ndef mentora_detailed_health_check():\n    health_status = {\n        \"app\": True,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "mentora_detailed_health_check",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def mentora_detailed_health_check():\n    health_status = {\n        \"app\": True,\n        \"database\": check_database_connection(),\n        \"dependencies\": check_dependencies()\n    }\n    if all(health_status.values()):\n        return {\"status\": \"healthy\"}\n    else:\n        return Response(content={\"status\": \"unhealthy\"}, media_type=\"application/json\", status_code=503)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check_database_connection",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check_database_connection():\n    # database connection check\n    #\n    return True\ndef check_dependencies():\n    # dependency check\n    return True\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8400,reload=True)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "check_dependencies",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def check_dependencies():\n    # dependency check\n    return True\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8400,reload=True)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app =  FastAPI(\n    title=\"Mentora Backend App\",\n    description=\"Backend of Mentora : An AI powered mental health companion app\",\n    summary=\"API endpoints for mental health journaling,therapist chatbot,activity generation,Statistics, and user management\",\n    contact={\n        \"name\": \"Tony Kanyamuka\",\n        \"url\": \"https://www.Mentora.com\",\n        \"email\": \"tonykanyamuka@icloud.com\",\n        \"phone\": \"+265996008328\"\n    },",
        "detail": "main",
        "documentation": {}
    }
]